import sys
import time
import argparse
import numpy as np
import orca
from autospec import sim_utils
from urbansim.utils import yamlio

import datasources
orca.add_injectable('process_has_pandana', True)


def run(forecast_year=2011, growth_rate=.01, random_seed=0, calibrated=False,
        data_out=False, refine=False, sched_dev=False, scenario=None,
        tracking=False):
    """
    Set up and run simulation.

    Parameters
    ----------
    forecast_year : int, optional
        Year to simulate to.
    growth_rate : float, optional
        Assumed growth-rate over forecast period (value of .01 means a 1% rate)
    random_seed : int, optional
        Random seed.
    calibrated : boolean, optional
        Indicates whether to use calibrated coefficients.  If True, requires calib_dummies.csv in data dir.
    data_out : boolean, optional
        Indicates whether to write output to HDF5.
    refine : boolean, optional
        Indicates whether to load and run refinements
    sched_dev : boolean, optional
        Indicates whether to load and run scheduled developments
    scenario : object, optional
        Indicates which scenario set to load for refinements and/or scheduled events
    tracking : boolean, optional
        Indicates whether to track progress of simulation and send progress information to app server.
    Returns
    -------
    _ : None
        No return value for now.
    """

    # Record start time
    start_time = time.time()
    orca.add_injectable('start_time', start_time)

    # Set value of random seed
    np.random.seed(random_seed)

    # Optionally use calibrated coefficients in simulation
    if calibrated:
        orca.add_injectable('calibrated', True)

    orca.add_injectable('tracking', tracking)

    # Set model parameters
    orca.add_injectable('growth_rate', growth_rate)
    orca.add_injectable('forecast_year',forecast_year)
    orca.add_injectable('db_connection', "host=paris.urbansim.com dbname='mrcog' user='urbancanvas' password='Visua1ization' port=5432")
    # Register models, variables
    import variables
    import models

    if scenario:
        import load_scenario
        orca.add_injectable('scenario', scenario)
    
    if refine:
        orca.add_injectable('refine', 'refinement_model')
        orca.run(['load_refinements'])
        
    if sched_dev:
        orca.add_injectable('sched_dev', 'scheduled_development_events_model')
        orca.run(['process_scheduled_development_events'])

    # Register auto-fitted models with orca
    yaml_cfg = yamlio.yaml_to_dict(str_or_buffer='./configs/yaml_configs.yaml')
    hlcm = sim_utils.register_orca_steps_for_segmented_model(yaml_cfg['hlcm'], models.make_hlcm_func)
    elcm = sim_utils.register_orca_steps_for_segmented_model(yaml_cfg['elcm'], models.make_elcm_func)
    rdplcm = sim_utils.register_orca_steps_for_segmented_model(yaml_cfg['rdplcm'], models.make_rdplcm_func)
    rent_repm = sim_utils.register_orca_steps_for_segmented_model(yaml_cfg['repm_rent'], models.make_repm_func)
    value_repm = sim_utils.register_orca_steps_for_segmented_model(yaml_cfg['repm_value'], models.make_repm_func)
    
    # Simulate
    if data_out:
        orca.run(datasources.step_sequence(), iter_vars = range(2011, forecast_year + 1), data_out='./data/test.h5')
    else:
        orca.run(datasources.step_sequence(), iter_vars = range(2011, forecast_year + 1))

    # Record end time
    end_time = time.time()
    time_elapsed = end_time - start_time
    print 'Simulation duration: %s minutes' % (time_elapsed/60)
    
    #import pickle
    #pickle.dump(orca.get_injectable('change_sets'), open('./data/change_sets.pkl', "wb"))

if __name__ == '__main__':

    # Run simulation with optional command-line arguments
    if len(sys.argv) > 1:
        parser = argparse.ArgumentParser()
        parser.add_argument("-y", "--year", type=int, help="forecast year to simulate to")
        parser.add_argument("-r", "--rate", type=float, help="growth rate over forecast period")
        parser.add_argument("-s", "--seed", type=int, help="random seed value")
        parser.add_argument("-sc", "--scenario", type=object, help="the scenario to use for simulation inputs")
        parser.add_argument("-sd", "--sched_dev", action="store_true", help="whether to load and run scheduled events")
        parser.add_argument("-re", "--refine", action="store_true", help="whether to load and run refinements")
        parser.add_argument("-c", "--calib", action="store_true", help="whether to use calibrated coeffs")
        parser.add_argument("-o", "--out", action="store_true", help="whether to write output h5")
        parser.add_argument("-t", "--tracking", action="store_true", help="whether to track simulation progress")
        parser.add_argument("-i", "--run_id", type=int, help="session ID generated by the app server")
        parser.add_argument("-m", "--mpo_id", type=int, help="MPO ID")

        args = parser.parse_args()
        forecast_year = args.year if args.year else 2011
        growth_rate = args.rate if args.rate else .01
        random_seed = args.seed if args.seed else 0
        calibrated = True if args.calib else False
        tracking = True if args.tracking else False
        data_out = True if args.out else False
        sched_dev = True if args.sched_dev else False
        refine = True if args.refine else False
        scenario = args.scenario if args.scenario else 'baseline'

        if tracking:
            if not args.run_id or not args.mpo_id:
                raise Exception("MPO ID and run ID parameters must be " +
                                "supplied to enable progress tracking.")
            else:
                orca.add_injectable('run_id', args.run_id)
                orca.add_injectable('mpo_id', args.mpo_id)

        run(forecast_year, growth_rate, random_seed, calibrated, data_out,
            sched_dev, refine, scenario, tracking)

    else:
        run()
