import os
import yaml
import numpy as np
import pandas as pd

import orca
from urbansim.utils import misc
from urbansim.models import GrowthRateTransition

import datasources


def simple_transition(tbl, rate, location_fname, set_year_built=False):
    """
    Run a simple growth rate transition model on the table passed in

    Parameters
    ----------
    tbl : DataFrameWrapper
        Table to be transitioned
    rate : float
        Growth rate
    location_fname : str
        The field name in the resulting dataframe to set to -1 (to unplace
        new agents)

    Returns
    -------
    Nothing
    """
    transition = GrowthRateTransition(rate)
    df_base = tbl.to_frame(tbl.local_columns)

    print "%d agents before transition" % len(df_base.index)
    df, added, copied, removed = transition.transition(df_base, None)
    print "%d agents after transition" % len(df.index)

    # Change tracking
    record_change_sets('added', (tbl.name, added))
    record_change_sets('removed', (tbl.name, removed))

    df.loc[added, location_fname] = -1

    if set_year_built:
        df.loc[added, 'year_built'] = orca.get_injectable('year')

    orca.add_table(tbl.name, df)


def record_change_sets(change_type, change_data):
    """
    Record change sets generated by the model steps. 

    Parameters
    ----------
    change_type : str
        Can be "added", "removed", or "updated".
    change_data : tuple
        In the case of additions and removals, change_data is a tuple of form (table_name, index_of_impacted_rows).
        In the case of updates, change_data is a tuple of form (table_name, column_name, Series of updated data).  
            Series of updated data can be a subset of the column if only a subset of rows had updated values.

    Returns
    -------
    None

    """
    if orca.get_injectable('track_changes'):
        year = orca.get_injectable('year')
        model_step = orca.get_injectable('iter_step').step_name
        changes = orca.get_injectable('change_sets')

        if year not in changes.keys():
            changes[year] = {}
            changes[year]['added'] = {}
            changes[year]['removed'] = {}
            changes[year]['updated'] = {}
            orca.add_injectable('change_sets', changes)

        if change_type == 'added':
            record_add(year, model_step, change_data)

        if change_type == 'removed':
            record_removal(year, model_step, change_data)

        if change_type == 'updated':
            record_update(year, model_step, change_data)


def record_add(year, model_step, change_data):
        table_name = change_data[0]
        added_records = change_data[1]

        changes = orca.get_injectable('change_sets')
        changes[year]['added'][(table_name, model_step)] = added_records
        orca.add_injectable('change_sets', changes)


def record_removal(year, model_step, change_data):
        table_name = change_data[0]
        removed_records = change_data[1]

        changes = orca.get_injectable('change_sets')
        changes[year]['removed'][(table_name, model_step)] = removed_records
        orca.add_injectable('change_sets', changes)


def record_update(year, model_step, change_data):
        table_name = change_data[0]
        column_name = change_data[1]
        updated_data = change_data[2]
        
        changes = orca.get_injectable('change_sets')
        changes[year]['updated'][(table_name, column_name, model_step)] = updated_data
        orca.add_injectable('change_sets', changes)


def register_table_from_store(table_name):
    """
    Create orca function for tables from data store.
    """
    @orca.table(table_name, cache=True)
    def func(store):
        return store[table_name]
    return func


def register_config_injectable_from_yaml(injectable_name, yaml_file):
    """
    Create orca function for YAML-based config injectables.
    """
    @orca.injectable(injectable_name, cache=True)
    def func():
        with open(os.path.join(misc.configs_dir(), yaml_file)) as f:
            config = yaml.load(f)
            return config
    return func


def register_simple_transition_model(agents_name, growth_rate):

    @orca.step('simple_%s_transition' % agents_name)
    def simple_transition_model():
        agents_table = orca.get_table(agents_name)
        print 'Running %s transition with %s percent growth rate' % (agents_name, growth_rate*100.0)
        return simple_transition(agents_table, growth_rate, orca.get_injectable('geography_id'))

    return simple_transition_model
